shiny::runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
source(file = "Static_Trip_Assignment.R")
source(file = "myapp/www/Static_Trip_Assignment.R")
getwd()
source(file = "myapp\www\Static_Trip_Assignment.R")
source(file = "myapp/www/Static_Trip_Assignment.R")
source(file = r"myapp/www/Static_Trip_Assignment.R")
source(file = "C:/Users/91766/Desktop/Projects/Transportation/Trip Distribution/myapp/www/Static_Trip_Assignment.R")
source("C:/Users/91766/Desktop/Projects/Transportation/Trip Distribution/myapp/Static_Trip_Assignment.R")
df_links <- read_xlsx("myapp/www/trip_assignment_example.xlsx",sheet = "links", col_names = TRUE)
df_flows <- read_data(input_file_path = "myapp/www/trip_assignment_example.xlsx",
sheet_name = "flows")
road_network <- creating_graph(df_links, a = 1, b = 1)
road_network <- initialization(g = road_network,
df_flows = df_flows)
fw <- trip_assignment(g = road_network,
df_flows = df_flows,
iterations = 2,
bisection_iterations = 5,
gap = 0.01,
alg = "fw",
AoN_algorithm = AoN)
msa <- trip_assignment(g = road_network, df_flows = df_flows,
iterations = 6,
bisection_iterations = 0,
gap = 0.001,
alg = "msa",
AoN_algorithm = AoN)
as_data_frame(fw[[1]])
as_data_frame(msa[[1]])
remove(list = ls())
runApp('myapp')
runApp('myapp')
runApp('myapp')
shiny::runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
a <- c(1,2,3)
a[length(a)]
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
shinyUI(fluidPage(
tabsetPanel(
#About ----
tabPanel(title = "About"),
#Trip Distribution ----
tabPanel(title = "Trip Distribution",
sidebarLayout(
sidebarPanel(
withMathJax(),
markdown("Gravity Model is used to generate trips between each OD pair without using any observed OD pattern.It's a synthetic Trip Distribution method.
It takes Trip Attractions, Generations and resisting factor (Time/Cost/Distance) for each zone and distribues
them into a OD matrix."),
p("This an App. $$T_{ij}(\\frac{a}{b})$$"),
fluidRow(column(width = 12,tableOutput(outputId = "ap_sample_df"), align = "center")),
fluidRow(column(width = 12,tableOutput(outputId = "mat_sample"), align = "center")),
markdown("Choose the suitable Deterrence Function and customize it later. Results can be donwloaded
in excel format. You can find the corresponding files **[here](www.facebook.com)**.")
),
mainPanel(
#gravity model column -----
column(width = 6,
h3("Trip distribution - Gravity Model"),
fluidRow(
column(width = 4,
br(),
h4("Upload input File"),
),
column(width = 4,
fileInput(inputId = "input_file", label = "")),
column(width = 4,
br(),
checkboxInput(inputId = "calc_ff", label = "Calculate Friction Factor"))
),
fluidRow(
column(width = 4,
br(),
h4("Sheet Names"),
),
column(width = 4,
textInput(inputId = "ap_sheetname", label = "Attractions & Productions")),
column(width = 4,
textInput(inputId = "ff_sheetname", label = "Distance/Cost/FF"))
),
fluidRow(
column(width = 12, h4("Select Deterrence Function"))
),
fluidRow(
column(width = 4,
selectInput(inputId = "deter_func_code", label = "", choices = list("Exponential" = 1, "Powered" = 2, "Combined" = 4, "None" = 0), selected = 0, multiple = FALSE)),
column(width = 4,
numericInput(inputId = "beta", label = "Beta", value = 0.1)),
column(width = 4,
numericInput(inputId = "power", label = "n Value", value = 2))
),
fluidRow(
column(width = 6,
h4("No.of Row and Column adjustments")),
column(width = 6,
numericInput(inputId = "num_adjustmets", label = "", value = 2, width = 1200))
),
fluidRow(
column(width = 12, uiOutput(outputId = "warning"), align = "center", style="color:red")
),
fluidRow(
column(width = 6,
actionButton(inputId = "run_gravity_model",label = "Execute Gravity Model", width = "100%"),
align = "right"),
column(width = 6,
downloadButton(outputId = "download_gravity_results", label = "Distributed Matrix", style = "width:100%;"),
align = "left")
),
fluidRow(
column(width = 12,
uiOutput(outputId = "td_msg"), align = "center")
)
),
#tlfd column -----
column(width = 6,
h3("Trip Length Frequency distribution (TLFD)"),
fluidRow(
column(width = 4,
br(),
h4("Distance Matrix")),
column(width = 4,
fileInput(inputId = "distance_mat_file", label = "Distance Matrix")),
column(width = 4,
textInput(inputId = "dist_sheet", label = "Sheet Name"))
),
fluidRow(
column(width = 4,
br(),
h4("Demand Matrix")),
column(width = 4,
fileInput(inputId = "demand_mat_file1", label = "Demand Matrix")),
column(width = 4,
textInput(inputId = "demand_sheet1", label = "Sheet Name"))
),
fluidRow(
column(width = 6,
br(),
h4("No.of intervals to consider")),
column(width = 6,
numericInput(inputId = "tlfd_inter", label = "", value = 5))
),
fluidRow(
column(width = 12,
checkboxInput(inputId = "tlfd_comp_code", label = "Compare TLFDs"),
align = 'center')
),
fluidRow(
uiOutput(outputId = "tlfd_comp_files")
),
fluidRow(
column(width = 12,
actionButton(inputId = "calc_tlfd", label = "Generate TLFD")),
align = "center"
),
fluidRow(
uiOutput(outputId = "tlfd_panels")
),
)
)
)
),
#Trip assignment ----
tabPanel(title = "Trip Assignment",
sidebarLayout(
sidebarPanel(
withMathJax(),
p("$$t=t_0[1+\\alpha(\\frac{V}{C})^\\beta]$$"),
p("Arrange the data as shown below and"),
fluidRow(column(width = 12,tableOutput(outputId = "links_sample_df"), align = "center")),
fluidRow(column(width = 12,tableOutput(outputId = "flow_sample_df"), align = "center")),
markdown("**alpha** and **beta** can be customized and different results can be extracted easily.")
),
mainPanel(
h2("Static Trip Assignment"),
column(width = 6,
fluidRow(
column(width = 6,
fileInput(inputId = "links_file", label = "File with Links data")),
column(width = 6,
textInput(inputId = "links_sheetname", label = "Sheet name"))
),
fluidRow(
column(width = 6,
fileInput(inputId = "flows_file", label = "File with Traffic Flow data")),
column(width = 6,
textInput(inputId = "flows_sheetname", label = "Sheet name"))
),
fluidRow(
column(width = 12, h4("Volume Delay Function(VDF) Parameters"))
),
fluidRow(
column(width = 4,
selectInput(inputId = "conv_alg_code",label = "Convergence Algorithm", choices = list("MSA" = 1,"FW" = 2), selected = 1, multiple = FALSE)),
column(width = 4,
numericInput(inputId = "alpha", label = "Alpha", value = 0.25)),
column(width = 4,
numericInput(inputId = "ta_beta", label = "Beta", value = 4.0))
),
fluidRow(
column(width = 4,
numericInput(inputId = "iterations", label = "Iterations", value = 100)),
column(width = 4,
numericInput(inputId = "bisec_iter", label = "Bisection Iterations", value = 0)),
column(width = 4,
numericInput(inputId = "gap", label = "Permissible Gap", value = 0.001))
),
fluidRow(
column(width = 4,
actionButton(inputId = "run_trip_assignment", label = "Trip Assignment", width = "100%")),
column(width = 4,
downloadButton(outputId = "ta_reult", label = "Assignment Result", style = "width:100%;")),
column(width = 4,
downloadButton(outputId = "aec_plot", label = "AEC Convergence Plot", style = "width:100%;"))
),
fluidRow(
column(width = 12,
uiOutput(outputId = "ta_msg"), align = "center")
)
),
column(width = 6)
)
)
),
#Mode Share ----
tabPanel(title = "Mode Choice")
)
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
shiny::runApp('myapp')
?markdown
runApp('myapp')
